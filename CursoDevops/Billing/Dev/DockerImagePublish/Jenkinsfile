pipeline {
    agent any

    environment {
        DOCKER_CLOUD = 'Dockerhub_Connect'
		DOCKER_CREDENTIALS_ID = 'Dockerhub_Password'
        DOCKER_IMAGE_NAME = 'hanji96/billingapp-backend'
        POM_PATH = 'billing/pom.xml'
        DOCKERFILE_DIR = 'billing/'
        BUILD_TAG = "1.1.${env.BUILD_NUMBER}"
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'origin/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/HansJP96/practica_kubernetes1.git',
                        credentialsId: 'GitHub_Autenticacion_SSH'
                    ]],
                    extensions: []
                ])
            }
        }

        stage('Build Project') {
            steps {
                script {
                    // Compila el proyecto sin ejecutar las pruebas
                    sh '''
                        mvn clean package -DskipTests -f ${env.POM_PATH}
                    '''
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
					docker.withDockerServer(env.DOCKER_CLOUD) {
						docker.withDockerRegistry('', env.DOCKER_CREDENTIALS_ID) {
							def app = docker.build("${env.DOCKER_IMAGE_NAME}:${env.BUILD_TAG}", "${env.DOCKERFILE_DIR}")
							app.push("${env.BUILD_TAG}")
							app.push("latest")
						}
					}
                }
            }
        }
		
		stage('Cleanup Docker Images') {
            steps {
                script {
                    docker.image("${env.DOCKER_IMAGE_NAME}:${env.BUILD_TAG}").remove()
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}