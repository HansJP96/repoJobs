podTemplate(
    label: 'agent-timeoffapp-dev-pr',
	inheritFrom: 'base-pod-template',
    containers: [
		containerTemplate(
			name: 'jnlp',
			image: 'jenkins/inbound-agent:alpine-jdk17',
			ttyEnabled: true
		),
        containerTemplate(
			name: 'node', 
			image: 'node:13.13.0-alpine',
			ttyEnabled: true,
			command: 'cat',
			envVars: [
				containerEnvVar(key: 'USE_CHROME', value: '1'),
				containerEnvVar(key: 'USE_GRID', value: '1'),
				containerEnvVar(key: 'PORT', value: '3000')
			]
		),
        containerTemplate(
		  name: 'selenium-browser',
		  image: 'selenium/standalone-chrome:110.0',
		  ttyEnabled: true,
		  command: 'cat'
		)
    ]
)
{
	node('agent-timeoffapp-dev-pr'){
	
		def pipelineStatus = 'SUCCESS'
		
		try {
			stage('Checkout Repository') {
				container('jnlp') {
				
					notifyGitHub('Checkout Repo', 'PENDING')
					echo 'Downloading Repository ...'
					
					checkout([
						$class: 'GitSCM',
						branches: [[name: 'origin/feature/*']],
						userRemoteConfigs: [[
							name: 'origin',
							url: 'https://github.com/HansJP96/Sofka-DevOps-Test.git',
							credentialsId: 'GitHub_Autenticacion_SSH',
							refspec: '+refs/pull/*/head:refs/remotes/origin/pr/*'
						]],
						extensions: [
							[$class: 'WipeWorkspace']
						]
					])
				}
			}
			
			stage('Install Dependencies') {
				container('node') {
				
					sh 'printenv'
					notifyGitHub('Installing Dependencies', 'PENDING')
					
					switch (PR_CURRENT_STATUS) {
						case 'opened':
						case 'reopened':
						case 'synchronize':
							echo "New PR created/updated: ${PR_TITLE}"
							echo "Installing dependencies ..."
							
							sh 'apk add --no-cache python2 make'
							sh 'npm run preinstall'
							sh 'npm install --loglevel verbose'
							
							break
						default:
							echo "Condition not met: Skipping this build"
							error("Skipping build")
					}
				}
			}

			stage('Start Test Server') {
				container('node') {
				
					notifyGitHub('Start Test Server', 'PENDING')
					sh 'echo "Starting app test server on port: ${PORT}"'
					
					sh 'nohup npm start &'
					
					sh '''					
						for i in $(seq 1 10); do
							if wget --spider http://localhost:${PORT}/login; then
								echo "El servidor está ejecutando correctamente"
								exit 0
							else
								echo "Intento $i: El servidor no está activo. Reintentando en 5 segundos..."
								sleep 5
							fi
						done
						echo "Error: El servidor no respondió después de 10 intentos."
						exit 1
					'''
				}
			}

			stage('Run Test') {
				container('node') {
				
					notifyGitHub('Running test', 'PENDING')
					
					echo "Check standalone-chrome server available"
					
					sh 'wget http://localhost:4444/wd/hub/status'
			
					echo "Init test using standalone-chrome server"
					
					sh 'npm test'
				}
			}
		} catch (e) {
			pipelineStatus = 'FAILURE'
            notifyGitHub('Finished Pipeline', 'FAILURE')
            throw e
        } finally {
			if (pipelineStatus == 'SUCCESS') {
				notifyGitHub('Finished Pipeline', 'SUCCESS')  // Solo notifica éxito si no hubo errores
			}
        }
	}
}

def notifyGitHub(String msg, String status) {
    if (env.PR_TITLE || env.GIT_COMMIT) { 
        step([$class: 'GitHubCommitStatusSetter',
            commitShaSource: [$class: 'ManuallyEnteredShaSource', sha: env.GITHUB_SHA],
            reposSource: [$class: 'ManuallyEnteredRepositorySource', url: 'https://github.com/HansJP96/Sofka-DevOps-Test'],
            contextSource: [$class: 'ManuallyEnteredCommitContextSource', context: 'ci/jenkins-PR'],
            statusBackrefSource: [$class: 'BuildRefBackrefSource'],
            statusResultSource: [
              $class: 'ConditionalStatusResultSource',
              results: [[$class: 'AnyBuildResult', state: status, message: msg]]
            ]
        ])
    } else {
        echo "No PR or commit associated. Skipping GitHub status update."
    }
}
